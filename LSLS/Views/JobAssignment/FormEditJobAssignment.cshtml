@model LSLS.ViewModels.FormJobAssignmentViewModel

@{
    ViewBag.Title = "FormEditJob";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }

    .controls {
        position: absolute;
        left: 300px;
        width: 140px;
        top: 0px;
        z-index: 5;
        background-color: #fff;
    }
</style>

<ul class="breadcrumb">
    <li class="breadcrumb-item"><a href="@Url.Action("Main", "Account")">Home</a></li>
    <li class="breadcrumb-item"><a href="@Url.Action("ListAllJobAssignments", "JobAssignment")">Job Assignments</a></li>
    <li class="breadcrumb-item active">Edit Job Assignment</li>
</ul>

<div class="container-fluid">
    <div class="row">
       
        <div class="col-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Search Map</h5>
                </div>
                <input id="pac-input" class="controls" type="text"
                       placeholder="Enter a location">
                <div class="embed-responsive embed-responsive-16by9">
                    <div class="embed-responsive-item" id="map" style="width: 100%; height: 100%;"></div>
                </div>
                <div id="infowindow-content">
                    <span id="place-name" class="title"></span><br>
                    Address:
                    <span id="place-address"></span><br>
                    Location:<br/>
                    lat: <span id="lat"></span><br/>
                    lng: <span id="lng"></span>
                </div>
            </div>
        </div>
        
        
        <div class="col-6">
            <div class="card border-warning">
                <div class="card-header text-dark bg-warning">
                    <h5 class="card-title">Edit Job Assignment</h5>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <form>

                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.JobAssignmentStatus, new { @class = "col-5" })
                                <div class="col-7">
                                    @(Model.JobAssignment.JobAssignmentStatus.Equals(true) ?
                                          Html.Label("Complete", new { @class = "alert alert-success" }) :
                                          Html.Label("Not Complete", new { @class = "alert alert-danger" }))
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.JobAssignmentDate, new { @class = "col-5" })
                                <div class="col-7">
                                    @Html.EditorFor(model => model.JobAssignment.JobAssignmentDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.JobAssignmentDate)
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.TruckDriverId, new { @class = "col-5" })
                                <div class="col-7">
                                    @Html.DropDownListFor(model => model.JobAssignment.TruckDriverId, new SelectList(Model.TruckDrivers, "TruckDriverId", "TruckId"), "Select", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.TruckDriverId)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.ShippingId, new { @class = "col-5" })
                                <div class="col-7">
                                    @Html.EditorFor(model => model.JobAssignment.ShippingId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.ShippingId)
                                </div>
                            </div>

                            <hr />
                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.StartingPointJob, new { @class = "col-5" })
                                <div class="col-7">
                                    @Html.EditorFor(model => model.JobAssignment.StartingPointJob, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.ShippingId)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Latitude", new { @class = "col-5" })
                                <div class="col-7">
                                    @Html.EditorFor(model => model.JobAssignment.LatitudeStartJob, new { htmlAttributes = new { @class = "form-control", @text = "StartingPointJob Latitude" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LatitudeStartJob)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Longitude", new { @class = "col-5" })
                                <div class="col-7">
                                    @Html.EditorFor(model => model.JobAssignment.LongitudeStartJob, new { htmlAttributes = new { @class = "form-control", @text = "StartingPointJob Longitude" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LongitudeStartJob)
                                </div>
                            </div>

                            <hr />
                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.DestinationJob, new { @class = "col-5" })
                                <div class="col-7">
                                    @Html.EditorFor(model => model.JobAssignment.DestinationJob, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.DestinationJob)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Latitude", new { @class = "col-5" })
                                <div class="col-7">
                                    @Html.EditorFor(model => model.JobAssignment.LatitudeDesJob, new { htmlAttributes = new { @class = "form-control", placeholder = "Starting Point" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LatitudeDesJob)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Longitude", new { @class = "col-5" })
                                <div class="col-7">
                                    @Html.EditorFor(model => model.JobAssignment.LongitudeDesJob, new { htmlAttributes = new { @class = "form-control", placeholder = "Starting Point" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LongitudeDesJob)
                                </div>
                            </div>


                            @Html.HiddenFor(model => model.JobAssignment.JobAssignmentId)
                            @Html.HiddenFor(model => model.JobAssignment.JobAssignmentStatus)
                            <hr />
                            <div class="form-group">
                                <div class="col-md-7">
                                    <input type="submit" class="btn btn-warning" value="Edit" onclick="return confirm('Make sure that it proud in correct TruckId!');" />
                                    @Html.ActionLink("Cancel", "ListAllJobAssignments", "JobAssignment", new { @class = "btn btn-outline-secondary" })
                                </div>
                            </div>
                        </form>
                    }
                </div>
            </div>
        </div>


    </div>

</div>


@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
}

<script>

</script>


<script>
    var data = @Html.Raw(Json.Encode(Model.JobAssignment));

    function initMap() {
        var pointA = new google.maps.LatLng(data.LatitudeStartJob, data.LongitudeStartJob),
            pointB = new google.maps.LatLng(data.LatitudeDesJob, data.LongitudeDesJob);

        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 15.767156, lng: 101.1128905 },
            zoom: 6
        });

        var input = document.getElementById('pac-input');

        // Instantiate a directions service.
        directionsService = new google.maps.DirectionsService,
            directionsDisplay = new google.maps.DirectionsRenderer({
                map: map
            }),
            markerA = new google.maps.Marker({
                position: pointA,
                title: data.StartingPointJob,
                label: "A",
                map: map
            }),
            markerB = new google.maps.Marker({
                position: pointB,
                title: data.DestinationJob,
                label: "B",
                map: map
            });

        // get route from A to B
        calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB);


        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);



        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        var infowindow = new google.maps.InfoWindow();
        var infowindowContent = document.getElementById('infowindow-content');
        infowindow.setContent(infowindowContent);
        var marker = new google.maps.Marker({
            map: map
        });
        marker.addListener('click', function() {
            infowindow.open(map, marker);
        });

        autocomplete.addListener('place_changed', function() {
            infowindow.close();
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                return;
            }

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);
            }

            // Set the position of the marker using the place ID and location.
            marker.setPlace({
                placeId: place.place_id,
                location: place.geometry.location
            });
            marker.setVisible(true);

            infowindowContent.children['place-name'].textContent = place.name;
            infowindowContent.children['place-address'].textContent =
                place.formatted_address;

            infowindowContent.children['lat'].textContent = place.geometry.location.lat();
            infowindowContent.children['lng'].textContent = place.geometry.location.lng();
            infowindow.open(map, marker);
        });
    }

    
    function calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB) {
        directionsService.route({
            origin: pointA,
            destination: pointB,
            travelMode: google.maps.TravelMode.DRIVING
        }, function(response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(response);
            } else {
                window.alert('Directions request failed due to ' + status);
            }
        });
    }

    initMap();

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCzxtZCeSypA1WNa4foGcKlir1Kmj3LjA4&libraries=places&callback=initMap"
        async defer></script>
