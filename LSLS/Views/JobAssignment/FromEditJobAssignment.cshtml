@model LSLS.ViewModels.FormJobAssignmentViewModel

@{
    ViewBag.Title = "FromEditJob";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #map {
        height: 625px;
        width: 100%;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }

    .controls {
        position: absolute;
        left: 300px;
        width: 140px;
        top: 0px;
        z-index: 5;
        background-color: #fff;
    }
</style>

<ul class="breadcrumb">
    <li>@Html.ActionLink("Home", "Main", "Account")</li>
    <li>@Html.ActionLink("Job Assignments", "ListAllJobAssignments", "JobAssignment")</li>
    <li class="active">Edit Job Assignment</li>
</ul>


<div class="container-fluid">
    <div class="row">
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <span class="glyphicon glyphicon-th"></span> Edit Job Assignment
                </div>
                <div class="panel-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-horizontal">

                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.JobAssignmentDate, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.JobAssignmentDate, new { htmlAttributes = new { @class = "form-control", type = "date", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.JobAssignmentDate)
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.TruckDriverId, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.JobAssignment.TruckDriverId, new SelectList(Model.TruckDrivers, "TruckDriverId", "TruckId"), "Select", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.TruckDriverId)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.ShippingId, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.ShippingId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.ShippingId)
                                </div>
                            </div>

                            <hr />
                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.StartingPointJob, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.StartingPointJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.ShippingId)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Latitude", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.LatitudeStartJob, new { htmlAttributes = new { @class = "form-control", @text = "StartingPointJob Latitude" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LatitudeStartJob)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Longitude", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.LongitudeStartJob, new { htmlAttributes = new { @class = "form-control", @text = "StartingPointJob Longitude" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LongitudeStartJob)
                                </div>
                            </div>

                            <hr />
                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.DestinationJob, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.DestinationJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.DestinationJob)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Latitude", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.LatitudeDesJob, new { htmlAttributes = new { @class = "form-control", placeholder = "Starting Point" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LatitudeDesJob)
                                </div>
                            </div>
                            <div class="form-group col-lg-offset-2">
                                @Html.Label("Longitude", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.LongitudeDesJob, new { htmlAttributes = new { @class = "form-control", placeholder = "Starting Point" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LongitudeDesJob)
                                </div>
                            </div>


                            @Html.HiddenFor(model => model.JobAssignment.JobAssignmentId)
                            @Html.HiddenFor(model => model.JobAssignment.JobAssignmentStatus)
                            <hr />
                            <div class="form-group">
                                <div class="col-md-10 col-lg-offset-2">
                                    <input type="submit" class="btn btn-primary" value="Save" onclick="return confirm('Make sure that it proud in correct TruckId!');" />
                                    @Html.ActionLink("Cancel", "ListAllJobAssignments", "JobAssignment", new { @class = "btn btn-default" })
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <span class="glyphicon glyphicon-th"></span> Search Map
                </div>
                <input id="pac-input" class="controls" type="text"
                       placeholder="Enter a location">
                <div id="map"></div>
                <div id="infowindow-content">
                    <span id="place-name" class="title"></span><br>
                    Address:
                    <span id="place-address"></span><br>
                    Location:
                    <span id="lat"></span>
                    <span id="lng"></span>
                </div>
            </div>
        </div>


    </div>

</div>


@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
}

<script>

</script>


<script>
        // This sample uses the Place Autocomplete widget to allow the user to search
        // for and select a place. The sample then displays an info window containing
        // the place ID and other information about the place that the user has
        // selected.

        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        //<script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 15.767156, lng: 101.1128905 },
                zoom: 6
            });

            var input = document.getElementById('pac-input');

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            var infowindow = new google.maps.InfoWindow();
            var infowindowContent = document.getElementById('infowindow-content');
            infowindow.setContent(infowindowContent);
            var marker = new google.maps.Marker({
                map: map
            });
            marker.addListener('click', function () {
                infowindow.open(map, marker);
            });

            autocomplete.addListener('place_changed', function () {
                infowindow.close();
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    return;
                }

                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }

                // Set the position of the marker using the place ID and location.
                marker.setPlace({
                    location: place.geometry.location
                });
                marker.setVisible(true);

                infowindowContent.children['place-name'].textContent = place.name;
                infowindowContent.children['place-address'].textContent =
                    place.formatted_address;

                infowindowContent.children['lat'].textContent = place.geometry.location.lat();
                infowindowContent.children['lng'].textContent = place.geometry.location.lng();
                infowindow.open(map, marker);
            });
        }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCzxtZCeSypA1WNa4foGcKlir1Kmj3LjA4&libraries=places&callback=initMap"
        async defer></script>
