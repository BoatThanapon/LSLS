@model LSLS.ViewModels.FormJobAssignmentViewModel

@{
    ViewBag.Title = "Details Job";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #map {
        height: 625px;
        width: 100%;
    }

    #floating-panel {
        position: absolute;
        top: 10px;
        left: 25%;
        z-index: 5;
        background-color: #fff;
        padding: 5px;
        border: 1px solid #999;
        text-align: center;
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
    }
</style>

<ul class="breadcrumb">
    <li>@Html.ActionLink("Home", "Main", "Account")</li>
    <li>@Html.ActionLink("Job Assignments", "ListAllJobAssignments", "JobAssignment")</li>
    <li class="active">Create New Job Assignment</li>
</ul>


<div class="container-fluid">
    <div class="row">
        <div class="col-lg-6">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <span class="glyphicon glyphicon-th"></span> Details Job Assignment
                </div>
                <div class="panel-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-horizontal">

                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.JobAssignmentStatus, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @(Model.JobAssignment.JobAssignmentStatus.Equals(true) ?
                                          Html.Label("Complete", new { @class = "alert alert-success" }) :
                                          Html.Label("Not Complete", new { @class = "alert alert-danger" }))
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.JobAssignmentDate, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.JobAssignmentDate, new { htmlAttributes = new { @class = "form-control", type = "date", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.JobAssignmentDate)
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.TruckDriverId, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.JobAssignment.TruckDriverId, new SelectList(Model.TruckDrivers, "TruckDriverId", "TruckId"), "Select", new { @class = "form-control", disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.TruckDriverId)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.ShippingId, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.ShippingId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.ShippingId)
                                </div>
                            </div>

                            <hr />
                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.StartingPointJob, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.StartingPointJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.ShippingId)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Latitude", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.LatitudeStartJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LatitudeStartJob)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Longitude", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.LongitudeStartJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LongitudeStartJob)
                                </div>
                            </div>

                            <hr />
                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.DestinationJob, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.DestinationJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.DestinationJob)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Latitude", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.LatitudeDesJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LatitudeDesJob)
                                </div>
                            </div>
                            <div class="form-group col-lg-offset-2">
                                @Html.Label("Longitude", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.LongitudeDesJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LongitudeDesJob)
                                </div>
                            </div>


                            @Html.HiddenFor(model => model.JobAssignment.JobAssignmentId)
                            @Html.HiddenFor(model => model.JobAssignment.JobAssignmentStatus)
                            <hr />
                            <div class="form-group">
                                <div class="col-md-10 col-lg-offset-2">
                                    @Html.ActionLink("Update", "FormEditJobAssignment", new { jobAssignmentId = Model.JobAssignment.JobAssignmentId }, new { @class = "btn btn-primary" })
                                    @Html.ActionLink("Cancel", "ListAllJobAssignments", "JobAssignment", new { @class = "btn btn-default" })
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <span class="glyphicon glyphicon-th"></span> Map
                </div>
                <div id="map"></div>
            </div>
        </div>


    </div>

</div>


@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
}



<script>
    var data = @Html.Raw(Json.Encode(Model.JobAssignment));

    function initMap() {
        var pointA = new google.maps.LatLng(data.LatitudeStartJob, data.LongitudeStartJob),
            pointB = new google.maps.LatLng(data.LatitudeDesJob, data.LongitudeDesJob),
            myOptions = {
                zoom: 6,
                center: pointA
            },
            map = new google.maps.Map(document.getElementById('map'), myOptions),
            // Instantiate a directions service.
            directionsService = new google.maps.DirectionsService,
            directionsDisplay = new google.maps.DirectionsRenderer({
                map: map
            }),
            markerA = new google.maps.Marker({
                position: pointA,
                title: data.StartingPointJob,
                label: "A",
                map: map
            }),
            markerB = new google.maps.Marker({
                position: pointB,
                title: data.DestinationJob,
                label: "B",
                map: map
            });

        // get route from A to B
        calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB);

    }



    function calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB) {
        directionsService.route({
            origin: pointA,
            destination: pointB,
            travelMode: google.maps.TravelMode.DRIVING
        }, function(response, status) {
            if (status == google.maps.DirectionsStatus.OK) {
                directionsDisplay.setDirections(response);
            } else {
                window.alert('Directions request failed due to ' + status);
            }
        });
    }

    initMap();

</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCzxtZCeSypA1WNa4foGcKlir1Kmj3LjA4&callback=initMap">
</script>