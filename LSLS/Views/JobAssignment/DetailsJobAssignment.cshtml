@model LSLS.ViewModels.FormJobAssignmentViewModel

@{
    ViewBag.Title = "Details Job";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<ul class="breadcrumb">
    <li>@Html.ActionLink("Home", "Main", "Account")</li>
    <li>@Html.ActionLink("Job Assignments", "ListAllJobAssignments", "JobAssignment")</li>
    <li class="active">Create New Job Assignment</li>
</ul>


<div class="container-fluid">
    <div class="row">
        <div class="col-lg-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <span class="glyphicon glyphicon-th"></span> Details Job Assignment
                </div>
                <div class="panel-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-horizontal">

                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.JobAssignmentDate, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.JobAssignmentDate, new { htmlAttributes = new { @class = "form-control", type = "date", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.JobAssignmentDate)
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.TruckDriverId, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.JobAssignment.TruckDriverId, new SelectList(Model.TruckDrivers, "TruckDriverId", "TruckId"), "Select", new { @class = "form-control", @readonly = "readonly" })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.TruckDriverId)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.ShippingId, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.ShippingId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.ShippingId)
                                </div>
                            </div>

                            <hr />
                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.StartingPointJob, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.StartingPointJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.ShippingId)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Latitude", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.LatitudeStartJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LatitudeStartJob)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Longitude", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.LongitudeStartJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LongitudeStartJob)
                                </div>
                            </div>

                            <hr />
                            <div class="form-group">
                                @Html.LabelFor(model => model.JobAssignment.DestinationJob, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.DestinationJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.DestinationJob)
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Latitude", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.LatitudeDesJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LatitudeDesJob)
                                </div>
                            </div>
                            <div class="form-group col-lg-offset-2">
                                @Html.Label("Longitude", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.JobAssignment.LongitudeDesJob, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.JobAssignment.LongitudeDesJob)
                                </div>
                            </div>


                            @Html.HiddenFor(model => model.JobAssignment.JobAssignmentId)
                            @Html.HiddenFor(model => model.JobAssignment.JobAssignmentStatus)
                            <hr />
                            <div class="form-group">
                                <div class="col-md-10 col-lg-offset-2">
                                    @Html.ActionLink("Edit", "FromEditJobAssignment", new { jobAssignmentId = Model.JobAssignment.JobAssignmentId }, new { @class = "btn btn-primary" })
                                    @Html.ActionLink("Cancel", "ListAllJobAssignments", "JobAssignment", new { @class = "btn btn-default" })
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <span class="glyphicon glyphicon-th"></span> Map
                </div>
                <iframe width=100%
                        height="450px"
                        frameborder="0" style="border:0"
                        src="https://www.google.com/maps/embed/v1/directions?key=AIzaSyCzxtZCeSypA1WNa4foGcKlir1Kmj3LjA4
                        &origin=@Model.JobAssignment.StartingPointJob
                        &destination=@Model.JobAssignment.DestinationJob"
                        allowfullscreen></iframe>
            </div>
        </div>


    </div>

</div>


@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
}

<script>

</script>


<script>
        // This sample uses the Place Autocomplete widget to allow the user to search
        // for and select a place. The sample then displays an info window containing
        // the place ID and other information about the place that the user has
        // selected.

        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        //<script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 15.767156, lng: 101.1128905 },
                zoom: 13
            });

            var input = document.getElementById('pac-input');

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            var infowindow = new google.maps.InfoWindow();
            var infowindowContent = document.getElementById('infowindow-content');
            infowindow.setContent(infowindowContent);
            var marker = new google.maps.Marker({
                map: map
            });
            marker.addListener('click', function () {
                infowindow.open(map, marker);
            });

            autocomplete.addListener('place_changed', function () {
                infowindow.close();
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    return;
                }

                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }

                // Set the position of the marker using the place ID and location.
                marker.setPlace({
                    location: place.geometry.location
                });
                marker.setVisible(true);

                infowindowContent.children['place-name'].textContent = place.name;
                infowindowContent.children['place-address'].textContent =
                    place.formatted_address;

                infowindowContent.children['lat'].textContent = place.geometry.location.lat;
                infowindowContent.children['lng'].textContent = place.geometry.location.lng;
                infowindow.open(map, marker);
            });
        }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCzxtZCeSypA1WNa4foGcKlir1Kmj3LjA4&libraries=places&callback=initMap"
        async defer></script>
